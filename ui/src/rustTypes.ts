/* tslint:disable */
/**
* This file was automatically generated by json-schema-to-typescript.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run json-schema-to-typescript to regenerate this file.
*/

export type ClientMessage = ({
GameState: GameState
} | {
AskUser: Ask
})
export type PlayerId = number
export type Ability = ({
Activated: ActivatedAbility
} | {
Triggered: TriggeredAbility
} | {
Static: StaticAbility
})
export type Cost = ("Selftap" | {
Mana: ManaCostSymbol
})
export type ManaCostSymbol = ("White" | "Blue" | "Black" | "Red" | "Green" | "Colorless" | "Generic")
export type Affected = (("Controller" | "Cardname") | {
Target: (TargetId | null)
} | {
ManuallySet: (TargetId | null)
} | {
/**
 * @minItems 2
 * @maxItems 2
 */
UpToXTarget: [number, TargetId[]]
})
export type TargetId = number
export type PermConstraint = (("IsTapped" | "IsCardname" | "YouControl" | "Other") | {
CardType: Type
} | {
Or: PermConstraint[]
} | {
HasKeyword: KeywordAbility
} | {
Subtype: Subtype
})
export type Type = ("Artifact" | "Enchantment" | "Planeswalker" | "Land" | "Creature" | "Instant" | "Sorcery")
export type KeywordAbility = ("FirstStrike" | "Haste" | "Vigilance" | "DoubleStrike" | "Flying" | "Prowess" | "Lifelink" | "Trample" | "Reach" | "Protection")
export type Subtype = ("Advisor" | "Aetherborn" | "Ally" | "Angel" | "Antelope" | "Ape" | "Archer" | "Archon" | "Army" | "Artificer" | "Assassin" | "AssemblyWorker" | "Atog" | "Aurochs" | "Avatar" | "Azra" | "Badger" | "Barbarian" | "Bard" | "Basilisk" | "Bat" | "Bear" | "Beast" | "Beeble" | "Beholder" | "Berserker" | "Bird" | "Blinkmoth" | "Boar" | "Bringer" | "Brushwagg" | "Camarid" | "Camel" | "Caribou" | "Carrier" | "Cat" | "Centaur" | "Cephalid" | "Chimera" | "Citizen" | "Cleric" | "Cockatrice" | "Construct" | "Coward" | "Crab" | "Crocodile" | "Cyclops" | "Dauthi" | "Demigod" | "Demon" | "Deserter" | "Devil" | "Dinosaur" | "Djinn" | "Dog" | "Dragon" | "Drake" | "Dreadnought" | "Drone" | "Druid" | "Dryad" | "Dwarf" | "Efreet" | "Egg" | "Elder" | "Eldrazi" | "Elemental" | "Elephant" | "Elf" | "Elk" | "Eye" | "Faerie" | "Ferret" | "Fish" | "Flagbearer" | "Fox" | "Fractal" | "Frog" | "Fungus" | "Gargoyle" | "Germ" | "Giant" | "Gnoll" | "Gnome" | "Goat" | "Goblin" | "God" | "Golem" | "Gorgon" | "Graveborn" | "Gremlin" | "Griffin" | "Hag" | "Halfling" | "Hamster" | "Harpy" | "Hellion" | "Hippo" | "Hippogriff" | "Homarid" | "Homunculus" | "Horror" | "Horse" | "Human" | "Hydra" | "Hyena" | "Illusion" | "Imp" | "Incarnation" | "Inkling" | "Insect" | "Jackal" | "Jellyfish" | "Juggernaut" | "Kavu" | "Kirin" | "Kithkin" | "Knight" | "Kobold" | "Kor" | "Kraken" | "Lamia" | "Lammasu" | "Leech" | "Leviathan" | "Lhurgoyf" | "Licid" | "Lizard" | "Manticore" | "Masticore" | "Mercenary" | "Merfolk" | "Metathran" | "Minion" | "Minotaur" | "Mole" | "Monger" | "Mongoose" | "Monk" | "Monkey" | "Moonfolk" | "Mouse" | "Mutant" | "Myr" | "Mystic" | "Naga" | "Nautilus" | "Nephilim" | "Nightmare" | "Nightstalker" | "Ninja" | "Noble" | "Noggle" | "Nomad" | "Nymph" | "Octopus" | "Ogre" | "Ooze" | "Orb" | "Orc" | "Orgg" | "Otter" | "Ouphe" | "Ox" | "Oyster" | "Pangolin" | "Peasant" | "Pegasus" | "Pentavite" | "Pest" | "Phelddagrif" | "Phoenix" | "Phyrexian" | "Pilot" | "Pincher" | "Pirate" | "Plant" | "Praetor" | "Prism" | "Processor" | "Rabbit" | "Ranger" | "Rat" | "Rebel" | "Reflection" | "Rhino" | "Rigger" | "Rogue" | "Sable" | "Salamander" | "Samurai" | "Sand" | "Saproling" | "Satyr" | "Scarecrow" | "Scion" | "Scorpion" | "Scout" | "Sculpture" | "Serf" | "Serpent" | "Servo" | "Shade" | "Shaman" | "Shapeshifter" | "Shark" | "Sheep" | "Siren" | "Skeleton" | "Slith" | "Sliver" | "Slug" | "Snake" | "Soldier" | "Soltari" | "Spawn" | "Specter" | "Spellshaper" | "Sphinx" | "Spider" | "Spike" | "Spirit" | "Splinter" | "Sponge" | "Squid" | "Squirrel" | "Starfish" | "Surrakar" | "Survivor" | "Tentacle" | "Tetravite" | "Thalakos" | "Thopter" | "Thrull" | "Tiefling" | "Treefolk" | "Trilobite" | "Triskelavite" | "Troll" | "Turtle" | "Unicorn" | "Vampire" | "Vedalken" | "Viashino" | "Volver" | "Wall" | "Warlock" | "Warrior" | "Weird" | "Werewolf" | "Whale" | "Wizard" | "Wolf" | "Wolverine" | "Wombat" | "Worm" | "Wraith" | "Wurm" | "Yeti" | "Zombie" | "Zubera" | "EndCreatureMarker" | "Plains" | "Island" | "Swamp" | "Mountain" | "Forest")
export type ClauseEffect = (("Destroy" | "ExileBattlefield" | "DrawCard") | {
AddMana: ManaCostSymbol[]
} | {
GainLife: number
} | {
Compound: Clause[]
} | {
SetTargetController: Clause
} | {
CreateToken: TokenAttribute[]
} | {
UntilEndTurn: ContEffect
} | {
/**
 * @minItems 2
 * @maxItems 2
 */
MultClause: [ClauseEffect, NumberComputer]
} | {
/**
 * @minItems 2
 * @maxItems 2
 */
PutCounter: [Counter, number]
})
export type TokenAttribute = ({
PT: PT
} | {
HasColor: Color
} | {
Type: Type
} | {
Subtype: Subtype
} | {
Ability: Ability
})
export type Color = ("White" | "Blue" | "Black" | "Red" | "Green" | "Colorless")
export type ContEffect = {
ModifyPT: PT
}
export type NumberComputer = {
NumPermanents: PermConstraint[]
}
export type Counter = "Plus1Plus1"
export type AbilityTrigger = {
ZoneMove: ZoneMoveTrigger
}
export type Zone = ("Hand" | "Library" | "Exile" | "Battlefield" | "Graveyard" | "Command" | "Stack")
export type StaticAbilityEffect = ("GivenByKeyword" | {
HasColor: Color
} | {
Protection: PermConstraint
})
export type CardId = number
export type EntType = ("RealCard" | "TokenCard" | "ActivatedAbility" | "TriggeredAbility")
export type ContDuration = ("Perpetual" | "EndOfTurn")
export type GameOutcome = (("Ongoing" | "Tie") | {
Winner: PlayerId
})
export type Phase = ("Begin" | "FirstMain" | "Combat" | "SecondMain" | "Ending")
export type PreventionEffect = "Unused"
export type Subphase = ("Untap" | "Upkeep" | "Draw" | "BeginCombat" | "Attackers" | "Blockers" | "FirstStrikeDamage" | "Damage" | "EndCombat" | "EndStep" | "Cleanup")
export type Ask = ({
Attackers: AskPairFor_TargetId
} | {
Blockers: AskPairFor_CardId
} | {
DiscardToHandSize: AskSelectNFor_CardId
} | {
Action: AskSelectNFor_Action
} | {
Target: AskSelectNFor_TargetId
})
export type Action = ({
Cast: CastingOption
} | {
PlayLand: CardId
} | {
ActivateAbility: {
index: number
source: CardId
[k: string]: unknown
}
})
export type ActionFilter = "None"

export interface GameState {
active_player: PlayerId
battlefield: MapOf_Null
cards: {
[k: string]: CardEnt
}
command: MapOf_Null
cont_effects: Continuous[]
exile: MapOf_Null
extra_turns: PlayerId[]
land_play_limit: number
lands_played_this_turn: number
mana: EntMapFor_ManaIdAnd_Mana
outcome: GameOutcome
phase?: (Phase | null)
phases: Phase[]
player: PlayerId
players: {
[k: string]: PlayerView
}
prevention_effects: ContPrevention[]
priority: PlayerId
stack: CardId[]
subphase?: (Subphase | null)
subphases: Subphase[]
triggered_abilities: ContTriggeredAbility[]
turn_order: PlayerId[]
[k: string]: unknown
}
export interface MapOf_Null {
[k: string]: null
}
export interface CardEnt {
abilities: Ability[]
already_dealt_damage: boolean
art_url?: (string | null)
attacking?: (TargetId | null)
blocked: CardId[]
blocking: CardId[]
controller?: (PlayerId | null)
costs: Cost[]
counters: Counter[]
damaged: number
effect: Clause[]
ent_type: EntType
etb_this_cycle: boolean
known_to: PlayerId[]
name: string
owner: PlayerId
printed?: (CardEnt | null)
printed_name: string
pt?: (PT | null)
source_of_ability?: (CardId | null)
subtypes: MapOf_Null
supertypes: MapOf_Null
tapped: boolean
types: MapOf_Null
[k: string]: unknown
}
export interface ActivatedAbility {
costs: Cost[]
effect: Clause[]
keyword?: (KeywordAbility | null)
[k: string]: unknown
}
export interface Clause {
affected: Affected
constraints: PermConstraint[]
effect: ClauseEffect
[k: string]: unknown
}
export interface PT {
power: number
toughness: number
[k: string]: unknown
}
export interface TriggeredAbility {
effect: Clause[]
keyword?: (KeywordAbility | null)
trigger: AbilityTrigger
[k: string]: unknown
}
export interface ZoneMoveTrigger {
constraint: PermConstraint[]
dest?: (Zone | null)
origin?: (Zone | null)
[k: string]: unknown
}
export interface StaticAbility {
effect: StaticAbilityEffect
keyword?: (KeywordAbility | null)
[k: string]: unknown
}
export interface Continuous {
affected: Affected
constraints: PermConstraint[]
duration: ContDuration
effect: ContEffect
source: CardId
[k: string]: unknown
}
export interface EntMapFor_ManaIdAnd_Mana {
ents: {
[k: string]: Mana
}
[k: string]: unknown
}
export interface Mana {
color: Color
restriction?: (ManaRestriction | null)
[k: string]: unknown
}
export interface ManaRestriction {
[k: string]: unknown
}
export interface PlayerView {
counters: Counter[]
graveyard: CardId[]
hand: CardId[]
library: CardId[]
life: number
mana_pool: MapOf_Null
max_handsize: number
name: string
[k: string]: unknown
}
export interface ContPrevention {
effect: PreventionEffect
source: CardId
[k: string]: unknown
}
export interface ContTriggeredAbility {
effect: Clause[]
source: CardId
trigger: AbilityTrigger
[k: string]: unknown
}
export interface AskPairFor_TargetId {
pairs: {
[k: string]: AskPairItemFor_TargetId
}
[k: string]: unknown
}
export interface AskPairItemFor_TargetId {
items: MapOf_Null
max: number
min: number
[k: string]: unknown
}
export interface AskPairFor_CardId {
pairs: {
[k: string]: AskPairItemFor_CardId
}
[k: string]: unknown
}
export interface AskPairItemFor_CardId {
items: MapOf_Null
max: number
min: number
[k: string]: unknown
}
export interface AskSelectNFor_CardId {
ents: CardId[]
max: number
min: number
[k: string]: unknown
}
export interface AskSelectNFor_Action {
ents: Action[]
max: number
min: number
[k: string]: unknown
}
export interface CastingOption {
costs: Cost[]
filter: ActionFilter
player: PlayerId
possible_to_take: boolean
source_card: CardId
zone: Zone
[k: string]: unknown
}
export interface AskSelectNFor_TargetId {
ents: TargetId[]
max: number
min: number
[k: string]: unknown
}
